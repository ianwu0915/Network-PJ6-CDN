#!/usr/bin/env python3
import argparse
import math
import select
import time
import gzip
import os
import socket
import json
import requests
import atexit
from dnslib import DNSRecord, DNSHeader, RR, A
import threading

COUNT_UPPER = 10
IP2LOCATION_API_URL = (
    "https://api.ip2location.io/?key=2F77EA52BF5A243428D1D33C03AEAA57&ip={}&format=json"
)
IP_API_URL = "http://ip-api.com/json/{}"
locations = """[
    {
        "ip_address": "45.33.55.171",
        "name": "cdn-http3.khoury.northeastern.edu",
        "city": "Fremont",
        "region": "California",
        "country": "US",
        "latitude": 37.5482697,
        "longitude": -121.988571
    },
    {
        "ip_address": "170.187.142.220",
        "name": "cdn-http4.khoury.northeastern.edu",
        "city": "Atlanta",
        "region": "Georgia",
        "country": "US",
        "latitude": 33.7489924,
        "longitude": -84.3902644
    },
    {
        "ip_address": "213.168.249.157",
        "name": "cdn-http7.khoury.northeastern.edu",
        "city": "London",
        "region": "England",
        "country": "GB",
        "latitude": 51.4893335,
        "longitude": -0.14405508452768728
    },
    {
        "ip_address": "139.162.82.207",
        "name": "cdn-http11.khoury.northeastern.edu",
        "city": "Shibuya",
        "region": "Tokyo",
        "country": "JP",
        "latitude": 35.6645956,
        "longitude": 139.6987107
    },
    {
        "ip_address": "45.79.124.209",
        "name": "cdn-http14.khoury.northeastern.edu",
        "city": "Mumbai",
        "region": "Maharashtra",
        "country": "IN",
        "latitude": 19.0785451,
        "longitude": 72.878176
    },
    {
        "ip_address": "192.53.123.145",
        "name": "cdn-http15.khoury.northeastern.edu",
        "city": "Toronto",
        "region": "Ontario",
        "country": "CA",
        "latitude": 43.6534817,
        "longitude": -79.3839347
    },
    {
        "ip_address": "192.46.221.203",
        "name": "cdn-http16.khoury.northeastern.edu",
        "city": "Sydney",
        "region": "New South Wales",
        "country": "AU",
        "latitude": -33.8698439,
        "longitude": 151.2082848
    }
  ]
"""


def haversine(lat1, lon1, lat2, lon2):
    """
    This function is to calculate the distance between two given
    location of latitude and longitude
    :param lat1: latitude of the first location
    :param lon1: longitude of the first location
    :param lat2: latitude of the second location
    :param lon2: longitude of the second location
    :return: The distance between two location
    """
    # Radius of the Earth in km
    R = 6371.0

    # coordinates in radians
    lat1_rad = math.radians(lat1)
    lon1_rad = math.radians(lon1)
    lat2_rad = math.radians(lat2)
    lon2_rad = math.radians(lon2)

    # differences
    delta_lat = lat2_rad - lat1_rad
    delta_lon = lon2_rad - lon1_rad

    # haversine formula
    a = (
        math.sin(delta_lat / 2) ** 2
        + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(delta_lon / 2) ** 2
    )
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))

    distance = R * c
    return distance


class Server:
    """
    The server class that represent each server location DNS know about
    """

    def __init__(self, ip, name, latitude, longitude, load=-1):
        """
        The inital fucntion for the server class
        :param ip: address of the http server
        :param name: of the server
        :param latitude: of the server
        :param longitude: of the server
        :param load: the server cpu load
        """
        self.ip_address = ip
        self.name = name
        self.latitude = latitude
        self.longitude = longitude
        self.load = load


class Dns_server:
    """
    The DNS server class that answer the query
    """

    def __init__(self, port, name):
        """
        The inital function for the dns server class
        :param port: The port number the dns server will receive the query
        :param name: The name of the question dns with translate into ip
        """
        self.port = port
        self.cache_file = "cache.gz"
        self.cache = {}
        self.upper_limit = 80.0
        self.load_cache()
        atexit.register(self.write_to_file)
        self.index = 0
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(("", self.port))
        if not name.endswith("."):
            name += "."
        self.name = name
        self.servers = []
        value = json.loads(locations)

        for entry in value:
            x = Server(
                entry["ip_address"],
                entry["name"],
                entry["latitude"],
                entry["longitude"],
            )
            self.servers.append(x)

    def write_to_file(self):
        """
        Write out the cache to file
        :return: None
        """
        print("write the cache to file!")
        with gzip.open("cache.gz", "wt") as f:
            json.dump(self.cache, f)

    def load_cache(self):
        """
        Load the save cache file to the cache
        :return: None
        """
        if os.path.exists(self.cache_file):
            if self.cache_file.endswith(".gz"):
                with gzip.open(self.cache_file, "rt") as f:
                    self.cache = json.load(f)
            else:
                with open(self.cache_file, "r") as f:
                    self.cache = json.load(f)
            print(self.cache)

    def update_server_loads(self):
        """
        Update the server load inside the self.servers list
        :return: None
        """
        print("update the load from the server!!")
        # Spawn a thread for each server to update its load concurrently
        threads = []
        for server in self.servers:
            thread = threading.Thread(target=self.check_server_load, args=(server,))
            threads.append(thread)
            thread.start()

        # Wait for all threads to finish
        for thread in threads:
            thread.join()

        for each in self.servers:
            print(f"servername: {each.name} load: {each.load}")

    def get_location_from_ip(self, ip):
        """
        Get the geolocation of the given ip
        :param ip: Ip to look up
        :return: The tuple of latitude and longitude
        """
        try:
            response = requests.get(IP2LOCATION_API_URL.format(ip))
            if response.status_code == 200:
                data = response.json()
                latitude = None
                longitude = None
                for key, value in data.items():
                    if key.startswith("lat"):
                        latitude = value
                    elif key.startswith("lon"):
                        longitude = value
                    if latitude and longitude:
                        break
                self.cache[ip] = (latitude, longitude)
                self.write_to_file()
                return (latitude, longitude)
            else:
                print("using back up look up ip api")
                response = requests.get(IP_API_URL.format(ip))
                if response.status_code == 200:
                    data = response.json()
                    latitude = None
                    longitude = None
                    for key, value in data.items():
                        if key.startswith("lat"):
                            latitude = value
                        elif key.startswith("lon"):
                            longitude = value
                        if latitude and longitude:
                            break
                    self.cache[ip] = (latitude, longitude)
                    self.write_to_file()
                    return (latitude, longitude)
                else:
                    print("back up look up fail")
                    return None
        except Exception as e:
            print(f"An error occurred while fetching location for IP {ip}: {e}\n")
            return None

    def get_closest_location(self, client_ip):
        """
        Get the closest location of the client ip in the servers list
        :param client_ip: client ip
        :return: The closest server object
        """
        temp = []
        if client_ip in self.cache:
            client_location = self.cache.get(client_ip)
            print("get from cache")
            print(client_location)
        else:
            client_location = self.get_location_from_ip(client_ip)
            print(f"get from lookup api {client_location}")
        if client_location is None:
            print("The look failed return none!")
            return None
        for i in range(len(self.servers)):
            distance = haversine(
                self.servers[i].latitude,
                self.servers[i].longitude,
                client_location[0],
                client_location[1],
            )
            new_entry = (distance, i)
            temp.append(new_entry)
        temp = sorted(temp, key=lambda x: x[0])
        for each in temp:
            index = each[1]
            if (
                self.servers[index].load > self.upper_limit
                or self.servers[index].load < 0
            ):
                print(
                    f"the server from {self.servers[each[1]].name} is overload! switch to next!"
                )
                continue
            return self.servers[index]

        print("cannot find the closest server")
        return None

    def check_server_load(self, server):
        """
        The function that will check the single server load
        :param server: The server to check the load
        :return: None
        """
        response = requests.get(f"http://{server.name}:{self.port}/server-load")
        if response.status_code == 200:
            response = response.json()
            server.load = response.get("cpu_usage")
        else:
            print(f"cannot get the server load of {server.name}")
            server.load = -1

    def check_index_range(self):
        """
        Check if the index is out of range.
        :return: None
        """
        if self.index >= len(self.servers):
            self.index = 0
        if self.index < 0:
            self.index = 0

    def handle_request(self, data, addr):
        """
        The function to handle the dns query
        :param data: The data of the dns query
        :param addr: The ip address of the request source.
        :return: None
        """
        request = DNSRecord.parse(data)
        qname = str(request.q.qname)
        qtype = request.q.qtype
        if (
            qname == self.name and qtype == 1
        ):  # Check if it's an A query for the specified name
            closest = self.get_closest_location(addr[0])
            if not closest:
                print("fail to look up geo location of ip! using the default index")
                self.check_index_range()
                closest = self.servers[self.index]
                self.index += 1
            response = DNSRecord(
                DNSHeader(id=request.header.id, qr=1, aa=1, ra=1), q=request.q
            )
            response.add_answer(RR(qname, rdata=A(closest.ip_address)))
            self.socket.sendto(response.pack(), addr)

    def run(self):
        """
        Running function of the dns server
        :return: None
        """
        print("DNS Server is running...")
        # Set the socket to non-blocking mode
        self.socket.setblocking(False)

        # Create a list to hold the server socket
        sockets = [self.socket]

        def periodic_update():
            while True:
                self.update_server_loads()
                time.sleep(3)

        # Start a separate thread for the periodic update
        update_thread = threading.Thread(target=periodic_update)
        update_thread.daemon = (
            True  # Set as daemon so it will exit when the main thread exits
        )
        update_thread.start()
        while True:

            readable, _, _ = select.select(sockets, [], [])

            for sock in readable:
                if sock == self.socket:
                    # Accept incoming connection
                    data, addr = sock.recvfrom(1024)
                    threading.Thread(
                        target=self.handle_request, args=(data, addr)
                    ).start()


def main():
    """
    Main function of the program
    :return: None
    """
    parser = argparse.ArgumentParser(description="DNS Server")
    parser.add_argument(
        "-n",
        dest="name",
        default="cs5700cdn.example.com.",
        type=str,
        help="CDN-specific name",
        required=True,
    )
    parser.add_argument(
        "-p",
        dest="port",
        type=int,
        default=20210,
        help="Port number for the DNS server",
        required=True,
    )
    args = parser.parse_args()

    dns_server = Dns_server(args.port, args.name)
    try:
        dns_server.run()
    finally:
        # Ensure that the cache is written to file before exiting
        dns_server.write_to_file()
        print("DNS server stopped and cache written to file.")


if __name__ == "__main__":
    main()
